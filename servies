#!/bin/bash

source ~+/vendor/minond/debug/debug

ROUTE_URLS=()
ROUTE_METHODS=()
ROUTE_HANDLERS=()

declare -A http_status_codes=(
    ["200"]="OK"
    ["404"]="Not found"
)

#=== FUNCTION =================================================================
#        NAME: pipe
# DESCRIPTION: create a fifo that acts as a pipe from a program to another
# PARAMETER 1: name of fifo file
#==============================================================================
pipe() {
    local name=$1
    mkfifo "$name"
    trap "rm -f '$name'" exit
}

#=== FUNCTION =================================================================
#        NAME: listen
# DESCRIPTION: makes netcat listen for a request
# PARAMETER 1: name of fifo file
# PARAMETER 2: listen on this host
# PARAMETER 2: listen on this port
#==============================================================================
listen() {
    local conn=$1
    local host=$2
    local port=$3

    debug server "listening for requests on $HOST:$PORT"

    while true; do
        cat "$conn" | netcat -l "$host" "$port" > >(
            local parsed=0
            local method=
            local url=

            while read line; do
                line=$(echo "$line" | tr -d '\r\n')

                if [ "$parsed" -eq 0 ]; then
                    parsed=1
                    url=$(echo "$line" | sed -n 's/.* \(\/.*\) .*/\1/p')
                    method=$(echo "$line" | sed -n 's/\(.*\) .* .*/\1/p');
                fi

                if [ "x$line" = "x" ]; then
                    route "$conn" "$method" "$url"
                fi
            done
        )

        debug:time_reset
    done
}

#=== FUNCTION =================================================================
#        NAME: route
# DESCRIPTION: find a request handler and call the action
# PARAMETER 1: name of fifo file
# PARAMETER 2: http method
# PARAMETER 3: url
#==============================================================================
route() {
    local action=

    local conn=$1
    local method=$2
    local url=$3

    for ((i=0;i<${#ROUTE_METHODS[@]};i++))
    do
        if [ "${ROUTE_METHODS[$i]}" = "$method" ] && [ "${ROUTE_URLS[$i]}" = "$url" ]; then
            action="${ROUTE_HANDLERS[$i]}"
            break
        fi
    done

    [ -z "$action" ] && action=not_found
    debug:set_color router 4
    debug router "routing $method $url to $action"
    eval "$action" > "$conn"
}

#=== FUNCTION =================================================================
#        NAME: status
# DESCRIPTION: output a header
# PARAMETER 1: header name
# PARAMETER 2: header value
#==============================================================================
status() {
    local code=$1
    local name=$2

    [ -z "$name" ] && name="${http_status_codes[$code]}"

    echo HTTP/1.1 "$code" "$name"
}

#=== FUNCTION =================================================================
#        NAME: header
# DESCRIPTION: output a header
# PARAMETER 1: header name
# PARAMETER 2: header value
#==============================================================================
header() {
    echo "$1: $2"
}

#=== FUNCTION =================================================================
#        NAME: go
# DESCRIPTION: start a server
#==============================================================================
go() {
    [ -z "$PORT" ] && PORT=8080
    [ -z "$HOST" ] && HOST=0.0.0.0
    pipe "conn"
    listen "conn" "$HOST" "$PORT"
}

#=== FUNCTION =================================================================
#        NAME: not_found
# DESCRIPTION: default not found handler. overwrite for custom output
#==============================================================================
not_found() {
    echo HTTP/1.1 404 Not Found
    echo Content-Type: text/plain
    echo
    echo 404, Not found
}

#=== FUNCTION =================================================================
#        NAME: save_route
# DESCRIPTION: add a new route
# PARAMETER 1: method
# PARAMETER 2: url string (include first forward slash)
# PARAMETER 3: command name
#==============================================================================
save_route() {
    local method=$1
    local url=$2
    shift
    shift
    local handler="$*"

    ROUTE_URLS+=("$url")
    ROUTE_METHODS+=("$method")
    ROUTE_HANDLERS+=("$handler")

    debug route "creating route: $method $url"
}

#=== FUNCTION =================================================================
#        NAME: get
# DESCRIPTION: add a get route handler
# PARAMETER 1: url string (include first forward slash)
# PARAMETER 2: command name
#==============================================================================
get() {
    save_route GET "$@"
}

#=== FUNCTION =================================================================
#        NAME: post
# DESCRIPTION: add a post route handler
# PARAMETER 1: url string (include first forward slash)
# PARAMETER 2: command name
#==============================================================================
post() {
    save_route POST "$@"
}

#=== FUNCTION =================================================================
#        NAME: put
# DESCRIPTION: add a put route handler
# PARAMETER 1: url string (include first forward slash)
# PARAMETER 2: command name
#==============================================================================
put() {
    save_route PUT "$@"
}

#=== FUNCTION =================================================================
#        NAME: patch
# DESCRIPTION: add a patch route handler
# PARAMETER 1: url string (include first forward slash)
# PARAMETER 2: command name
#==============================================================================
patch() {
    save_route PATCH "$@"
}

# running as command?
if [ ! -z "$1" ]; then
    source "$1"
    go
fi
